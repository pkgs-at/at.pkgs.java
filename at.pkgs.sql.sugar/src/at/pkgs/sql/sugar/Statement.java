/*
 * Copyright (c) 2009-2015, Architector Inc., Japan
 * All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package at.pkgs.sql.sugar;

import java.sql.SQLException;
import java.sql.SQLWarning;

public class Statement
extends DatabaseObject<java.sql.Statement>
implements java.sql.Statement {

	public Statement(
			Connection connection,
			java.sql.Statement wrapped) {
		super(connection, wrapped);
	}

	@Override
	public int getMaxFieldSize() {
		try {
			return this.unwrap().getMaxFieldSize();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setMaxFieldSize(int value) {
		try {
			this.unwrap().setMaxFieldSize(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getMaxRows() {
		try {
			return this.unwrap().getMaxRows();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setMaxRows(int value) {
		try {
			this.unwrap().setMaxRows(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setEscapeProcessing(boolean value) {
		try {
			this.unwrap().setEscapeProcessing(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getQueryTimeout() {
		try {
			return this.unwrap().getQueryTimeout();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setQueryTimeout(int value) {
		try {
			this.unwrap().setQueryTimeout(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean isPoolable() {
		try {
			return this.unwrap().isPoolable();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setPoolable(boolean value) {
		try {
			this.unwrap().setPoolable(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setCursorName(String value) {
		try {
			this.unwrap().setCursorName(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void addBatch(String query) {
		try {
			this.unwrap().addBatch(query);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void clearBatch() {
		try {
			this.unwrap().clearBatch();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean execute(String query, int[] columnIndexes) {
		try {
			return this.unwrap().execute(query, columnIndexes);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean execute(String query, String[] columnNames) {
		try {
			return this.unwrap().execute(query, columnNames);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean execute(String query, int autoGeneratedKeys) {
		try {
			return this.unwrap().execute(query, autoGeneratedKeys);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean execute(String query) {
		try {
			return this.unwrap().execute(query);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int executeUpdate(String query, int[] columnIndexes) {
		try {
			return this.unwrap().executeUpdate(query, columnIndexes);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int executeUpdate(String query, String[] columnNames) {
		try {
			return this.unwrap().executeUpdate(query, columnNames);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int executeUpdate(String query, int autoGeneratedKeys) {
		try {
			return this.unwrap().executeUpdate(query, autoGeneratedKeys);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int executeUpdate(String query) {
		try {
			return this.unwrap().executeUpdate(query);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int[] executeBatch() {
		try {
			return this.unwrap().executeBatch();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public ResultSet executeQuery(String query) {
		try {
			return this.wrap(
					this.unwrap().executeQuery(query));
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void cancel() {
		try {
			this.unwrap().cancel();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public SQLWarning getWarnings() {
		try {
			return this.unwrap().getWarnings();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void clearWarnings() {
		try {
			this.unwrap().clearWarnings();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getUpdateCount() {
		try {
			return this.unwrap().getUpdateCount();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean getMoreResults(int current) {
		try {
			return this.unwrap().getMoreResults(current);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean getMoreResults() {
		try {
			return this.unwrap().getMoreResults();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public ResultSet getResultSet() {
		try {
			return this.wrap(
					this.unwrap().getResultSet());
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public ResultSet getGeneratedKeys() {
		try {
			return this.wrap(
					this.unwrap().getGeneratedKeys());
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getResultSetType() {
		try {
			return this.unwrap().getResultSetType();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getResultSetConcurrency() {
		try {
			return this.unwrap().getResultSetConcurrency();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getResultSetHoldability() {
		try {
			return this.unwrap().getResultSetHoldability();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getFetchDirection() {
		try {
			return this.unwrap().getFetchDirection();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setFetchDirection(int value) {
		try {
			this.unwrap().setFetchDirection(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public int getFetchSize() {
		try {
			return this.unwrap().getFetchSize();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void setFetchSize(int value) {
		try {
			this.unwrap().setFetchSize(value);
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public boolean isClosed() {
		try {
			return this.unwrap().isClosed();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

	@Override
	public void close() {
		try {
			this.unwrap().close();
		}
		catch (SQLException cause) {
			throw new DatabaseException(cause);
		}
	}

}
